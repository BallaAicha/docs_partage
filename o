package com.socgen.unibank.services.autotest.model.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FolderDTO {
    private Long id;
    private String name;
    private Long parentFolderId; // ID du dossier parent pour gérer les hiérarchies
    private Date creationDate;
    private Date modificationDate;
    private String createdBy;
    private String modifiedBy;
    private List<DocumentDTO> documents; // Liste des documents dans ce dossier
    private List<FolderDTO> subFolders; // Liste des sous-dossiers
}



———————

package com.socgen.unibank.services.autotest.model.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CreateFolderRequest {
    private String name;           // Nom du dossier
    private Long parentFolderId;   // Optionnel, pour définir le dossier parent
    private String createdBy;      // Identifiant de l'utilisateur créant ce dossier
}



package com.socgen.unibank.services.autotest.model.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class GetFolderRequest {
    private Long folderId; // Recherche par ID du dossier
}




package com.socgen.unibank.services.autotest.model.usecases;

import com.socgen.unibank.platform.models.RequestContext;
import com.socgen.unibank.services.autotest.model.model.CreateFolderRequest;
import com.socgen.unibank.services.autotest.model.model.FolderDTO;

public interface CreateFolder {
    FolderDTO handle(CreateFolderRequest input, RequestContext context);
}



package com.socgen.unibank.services.autotest.model.usecases;

import com.socgen.unibank.platform.models.RequestContext;
import com.socgen.unibank.services.autotest.model.model.FolderDTO;
import com.socgen.unibank.services.autotest.model.model.GetFolderRequest;

import java.util.List;

public interface GetFolder {
    List<FolderDTO> handle(GetFolderRequest input, RequestContext context);
}




package com.socgen.unibank.services.autotest.model;

import com.socgen.unibank.platform.models.RequestContext;
import com.socgen.unibank.services.autotest.model.model.*;
import com.socgen.unibank.services.autotest.model.usecases.CreateFolder;
import com.socgen.unibank.services.autotest.model.usecases.GetFolder;
import io.swagger.v3.oas.annotations.Operation;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RequestMapping(name = "folders", produces = "application/json")
public interface FolderAPI extends GetFolder, CreateFolder {

    @Operation(summary = "Get list of folders")
    @GetMapping("/folders")
    @Override
    List<FolderDTO> handle(GetFolderRequest input, @ModelAttribute RequestContext ctx);

    @Operation(summary = "Create a new folder")
    @PostMapping("/folder")
    @Override
    FolderDTO handle(@RequestBody CreateFolderRequest input, @ModelAttribute RequestContext ctx);
}





package com.socgen.unibank.services.autotest.core.usecases;

import com.socgen.unibank.platform.models.RequestContext;
import com.socgen.unibank.services.autotest.core.FolderRepository;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.FolderEntity;
import com.socgen.unibank.services.autotest.model.model.CreateFolderRequest;
import com.socgen.unibank.services.autotest.model.model.FolderDTO;
import com.socgen.unibank.services.autotest.model.usecases.CreateFolder;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Date;

@AllArgsConstructor
@Service
public class CreateFolderImpl implements CreateFolder {

    private final FolderRepository folderRepository;

    @Override
    public FolderDTO handle(CreateFolderRequest input, RequestContext context) {
        FolderEntity folderEntity = new FolderEntity();
        folderEntity.setName(input.getName());
        folderEntity.setCreatedBy(input.getCreatedBy());
        folderEntity.setCreationDate(new Date());
        folderEntity.setModificationDate(new Date());

        // Définir le dossier parent, si disponible
        if (input.getParentFolderId() != null) {
            FolderEntity parentFolder = folderRepository.findById(input.getParentFolderId())
                .orElseThrow(() -> new IllegalArgumentException("Parent folder not found"));
            folderEntity.setParentFolder(parentFolder);
        }

        FolderEntity savedFolder = folderRepository.save(folderEntity);
        return new FolderDTO(
            savedFolder.getId(),
            savedFolder.getName(),
            savedFolder.getParentFolder() != null ? savedFolder.getParentFolder().getId() : null,
            savedFolder.getCreationDate(),
            savedFolder.getModificationDate(),
            savedFolder.getCreatedBy(),
            savedFolder.getModifiedBy(),
            null,
            null
        );
    }
}




package com.socgen.unibank.services.autotest.core.usecases;

import com.socgen.unibank.platform.models.RequestContext;
import com.socgen.unibank.services.autotest.core.FolderRepository;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.FolderEntity;
import com.socgen.unibank.services.autotest.model.model.FolderDTO;
import com.socgen.unibank.services.autotest.model.model.GetFolderRequest;
import com.socgen.unibank.services.autotest.model.usecases.GetFolder;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@Service
public class GetFolderImpl implements GetFolder {

    private final FolderRepository folderRepository;

    @Override
    public List<FolderDTO> handle(GetFolderRequest input, RequestContext context) {
        List<FolderEntity> folders = input.getFolderId() != null
            ? List.of(folderRepository.findById(input.getFolderId()).orElseThrow(() -> new IllegalArgumentException("Folder not found")))
            : folderRepository.findAll();

        return folders.stream()
            .map(folder -> new FolderDTO(
                folder.getId(),
                folder.getName(),
                folder.getParentFolder() != null ? folder.getParentFolder().getId() : null,
                folder.getCreationDate(),
                folder.getModificationDate(),
                folder.getCreatedBy(),
                folder.getModifiedBy(),
                folder.getDocuments() != null ? folder.getDocuments().stream() // Conversion de documents liés
                    .map(document -> {
                        // ... map DocumentEntity to DocumentDTO
                    }).collect(Collectors.toList()) : null,
                folder.getSubFolders() != null ? folder.getSubFolders().stream() // Conversion de sous-dossiers
                    .map(subFolder -> {
                        // ... map FolderEntity to FolderDTO
                    }).collect(Collectors.toList()) : null
            ))
            .collect(Collectors.toList());
    }
}




package com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;
import java.util.List;

@Entity
@Table(name = "folder")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class FolderEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String name;

    @ManyToOne
    @JoinColumn(name = "parent_folder_id")
    private FolderEntity parentFolder;

    @OneToMany(mappedBy = "parentFolder", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<FolderEntity> subFolders;

    @OneToMany(mappedBy = "folder", cascade = CascadeType.ALL) // Documents associés
    private List<DocumentEntity> documents;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private Date creationDate;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private Date modificationDate;

    @Column(nullable = false)
    private String createdBy;

    @Column(nullable = false)
    private String modifiedBy;
}



package com.socgen.unibank.services.autotest.core;

import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.FolderEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FolderRepository extends JpaRepository<FolderEntity, Long> {}





Liquidate :::



<changeSet id="4" author="Ousmane">
    <createTable tableName="folder">
        <column name="id" type="BIGINT" autoIncrement="true">
            <constraints primaryKey="true"/>
        </column>
        <column name="name" type="VARCHAR(255)">
            <constraints nullable="false" unique="true"/>
        </column>
        <column name="parent_folder_id" type="BIGINT"/>
        <column name="creation_date" type="TIMESTAMP">
            <constraints nullable="false"/>
        </column>
        <column name="modification_date" type="TIMESTAMP">
            <constraints nullable="false"/>
        </column>
        <column name="created_by" type="VARCHAR(255)">
            <constraints nullable="false"/>
        </column>
        <column name="modified_by" type="VARCHAR(255)">
            <constraints nullable="false"/>
        </column>
    </createTable>

    <addForeignKeyConstraint baseColumnNames="parent_folder_id"
                             baseTableName="folder"
                             referencedColumnNames="id"
                             referencedTableName="folder"
                             constraintName="fk_folder_parent"/>
</changeSet>
