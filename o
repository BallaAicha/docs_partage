a) Gestion des Versions

@Entity
@Table(name = "document_version")
public class DocumentVersionEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "document_id", nullable = false)
    private DocumentEntity document;

    @Column(nullable = false)
    private String versionNumber; // Format: "1.0", "1.1", "2.0"



    @Column(nullable = false)
    private String name; // test_1.0.pdf

    @Column
    private String description;

    @Column(nullable = false)
    private Date creationDate;

    @Column(nullable = false)
    private String createdBy;
}


b) Document avec Relations Hiérarchiques

@Entity
@Table(name = "document")
public class DocumentEntity {
   private String name;
private String description;
private DocumentStatus status;
private List<MetaDataDTO> metadata;


    @ManyToOne
    @JoinColumn(name = "parent_document_id")
    private DocumentEntity parentDocument;

    @OneToMany(mappedBy = "parentDocument")
    private List<DocumentEntity> childDocuments;

    @OneToMany(mappedBy = "document", cascade = CascadeType.ALL)
    private List<DocumentVersionEntity> versions;


}


4. Service de Gestion des Versions

@Service
public class DocumentVersionService {
    
    @Autowired
    private DocumentVersionRepository versionRepository;
    
    @Autowired
    private S3Service s3Service;

    public DocumentVersionEntity createNewVersion(DocumentEntity document, MultipartFile file) {
        // Générer nouveau numéro de version
        String newVersionNumber = generateNextVersionNumber(document);
        
        // Générer le nom de fichier pour S3
        String s3Key = generateS3Key(document, newVersionNumber, file.getOriginalFilename());
        
        // Upload vers S3
        s3Service.uploadFile(file, s3Key);
        
        // Créer l'entité de version
        DocumentVersionEntity version = new DocumentVersionEntity();
        version.setDocument(document);
        version.setVersionNumber(newVersionNumber);
        version.setS3Key(s3Key);
        version.setName(generateVersionName(document.getName(), newVersionNumber));
        version.setCreationDate(new Date());
        
        return versionRepository.save(version);
    }

    private String generateNextVersionNumber(DocumentEntity document) {
        // Logique pour générer le prochain numéro de version
        // Ex: "1.0" -> "1.1" ou "2.0" selon la politique de versionnement
    }
}

5. Gestion de l'Arborescence
@Service
public class DocumentHierarchyService {
    
    @Autowired
    private DocumentRepository documentRepository;
    
    public void addChildDocument(Long parentId, Long childId) {
        DocumentEntity parent = documentRepository.findById(parentId)
            .orElseThrow(() -> new DocumentNotFoundException(parentId));
        DocumentEntity child = documentRepository.findById(childId)
            .orElseThrow(() -> new DocumentNotFoundException(childId));
            
        child.setParentDocument(parent);
        documentRepository.save(child);
    }
    
    public List<DocumentEntity> getDocumentHierarchy(Long documentId) {
        // Récupérer l'arborescence complète d'un document
    }
}
