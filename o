Voici le code à adapter pour répondre à mes besoins :
NB : veille à respecter scrupuleusement mes besoins à la lettre :
Code :

package com.example.generator.dto;

import lombok.Data;

@Data
public class ProjectRequest {
    private String projectName;
    private String javaVersion;
    private String gradleVersion;
    private String groupId;
    private String artifactId;
    private String description;
}




——————————
package com.example.generator.service;

import com.example.generator.dto.ProjectRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

@Service
@RequiredArgsConstructor
public class ProjectGeneratorService {

    public Resource generateProject(ProjectRequest request) {
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();//permer de stocker les données dans un tableau d'octets cad en mémoire c'eest le cas  ou on ve
             ZipOutputStream zos = new ZipOutputStream(baos)) {

            // Generate root project files
            generateRootProjectFiles(zos, request);

            // Generate core module
            generateCoreModule(zos, request);

            // Generate API module
            generateApiModule(zos, request);

            // Generate service module
            generateServiceModule(zos, request);

            zos.finish();
            return new ByteArrayResource(baos.toByteArray());
        } catch (IOException e) {
            throw new RuntimeException("Failed to generate project", e);
        }
    }

    private void generateRootProjectFiles(ZipOutputStream zos, ProjectRequest request) throws IOException {
        // settings.gradle
        String settingsGradle = String.format("""
            rootProject.name = '%s'
            include 'core'
            include 'api'
            include 'service'
            """, request.getProjectName());
        addToZip(zos, "settings.gradle", settingsGradle);

        // build.gradle
        String buildGradle = String.format("""
            plugins {
                id 'org.springframework.boot' version '3.2.2' apply false
                id 'io.spring.dependency-management' version '1.1.4' apply false
                id 'java'
            }

            allprojects {
                group = '%s'
                version = '0.0.1-SNAPSHOT'

                repositories {
                    mavenCentral()
                }
            }

            subprojects {
                apply plugin: 'java'
                apply plugin: 'org.springframework.boot'
                apply plugin: 'io.spring.dependency-management'

                java {
                    sourceCompatibility = '%s'
                }

                dependencies {
                    compileOnly 'org.projectlombok:lombok'
                    annotationProcessor 'org.projectlombok:lombok'
                }
            }
            """, request.getGroupId(), "JavaVersion.VERSION_" + request.getJavaVersion());
        addToZip(zos, "build.gradle", buildGradle);
    }

    private void generateCoreModule(ZipOutputStream zos, ProjectRequest request) throws IOException {
        String basePackagePath = request.getGroupId().replace('.', '/') + "/" + request.getArtifactId();

        // Core module build.gradle
        String coreBuildGradle = """
            dependencies {
                implementation 'org.springframework.boot:spring-boot-starter'
            }
            """;
        addToZip(zos, "core/build.gradle", coreBuildGradle);

        // Sample domain entity
        String entityClass = String.format("""
            package %s.core.domain;

            import lombok.Data;

            @Data
            public class SampleEntity {
                private String id;
                private String name;
            }
            """, request.getGroupId());
        addToZip(zos, "core/src/main/java/" + basePackagePath + "/core/domain/SampleEntity.java", entityClass);

        // Sample port
        String portInterface = String.format("""
            package %s.core.ports;

            import %s.core.domain.SampleEntity;

            public interface SamplePort {
                SampleEntity save(SampleEntity entity);
                SampleEntity findById(String id);
            }
            """, request.getGroupId(), request.getGroupId());
        addToZip(zos, "core/src/main/java/" + basePackagePath + "/core/ports/SamplePort.java", portInterface);
    }

    private void generateApiModule(ZipOutputStream zos, ProjectRequest request) throws IOException {
        String basePackagePath = request.getGroupId().replace('.', '/') + "/" + request.getArtifactId();

        // API module build.gradle
        String apiBuildGradle = """
            dependencies {
                implementation project(':core')
                implementation 'org.springframework.boot:spring-boot-starter-web'
            }
            """;
        addToZip(zos, "api/build.gradle", apiBuildGradle);

        // Sample controller
        String controllerClass = String.format("""
            package %s.api.controller;

            import %s.core.domain.SampleEntity;
            import %s.core.ports.SamplePort;
            import lombok.RequiredArgsConstructor;
            import org.springframework.web.bind.annotation.*;

            @RestController
            @RequestMapping("/api/samples")
            @RequiredArgsConstructor
            public class SampleController {
                private final SamplePort samplePort;

                @PostMapping
                public SampleEntity create(@RequestBody SampleEntity entity) {
                    return samplePort.save(entity);
                }

                @GetMapping("/{id}")
                public SampleEntity getById(@PathVariable String id) {
                    return samplePort.findById(id);
                }
            }
            """, request.getGroupId(), request.getGroupId(), request.getGroupId());
        addToZip(zos, "api/src/main/java/" + basePackagePath + "/api/controller/SampleController.java", controllerClass);
    }

    private void generateServiceModule(ZipOutputStream zos, ProjectRequest request) throws IOException {
        String basePackagePath = request.getGroupId().replace('.', '/') + "/" + request.getArtifactId();

        // Service module build.gradle
        String serviceBuildGradle = """
            dependencies {
                implementation project(':core')
                implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
                runtimeOnly 'com.h2database:h2'
            }
            """;
        addToZip(zos, "service/build.gradle", serviceBuildGradle);

        // Sample service implementation
        String serviceClass = String.format("""
            package %s.service.adapter;

            import %s.core.domain.SampleEntity;
            import %s.core.ports.SamplePort;
            import org.springframework.stereotype.Service;

            import java.util.HashMap;
            import java.util.Map;
            import java.util.UUID;

            @Service
            public class SampleAdapter implements SamplePort {
                private final Map<String, SampleEntity> storage = new HashMap<>();

                @Override
                public SampleEntity save(SampleEntity entity) {
                    if (entity.getId() == null) {
                        entity.setId(UUID.randomUUID().toString());
                    }
                    storage.put(entity.getId(), entity);
                    return entity;
                }

                @Override
                public SampleEntity findById(String id) {
                    return storage.get(id);
                }
            }
            """, request.getGroupId(), request.getGroupId(), request.getGroupId());
        addToZip(zos, "service/src/main/java/" + basePackagePath + "/service/adapter/SampleAdapter.java", serviceClass);

        // Main application class
        String mainClass = String.format("""
            package %s;

            import org.springframework.boot.SpringApplication;
            import org.springframework.boot.autoconfigure.SpringBootApplication;

            @SpringBootApplication
            public class Application {
                public static void main(String[] args) {
                    SpringApplication.run(Application.class, args);
                }
            }
            """, request.getGroupId());
        addToZip(zos, "service/src/main/java/" + basePackagePath + "/Application.java", mainClass);
    }

    private void addToZip(ZipOutputStream zos, String path, String content) throws IOException {
        ZipEntry entry = new ZipEntry(path);
        zos.putNextEntry(entry);
        zos.write(content.getBytes(StandardCharsets.UTF_8));
        zos.closeEntry();
    }
}

——————————————————


package com.example.generator.controller;

import com.example.generator.dto.ProjectRequest;
import com.example.generator.service.ProjectGeneratorService;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class ProjectGeneratorController {

    private final ProjectGeneratorService projectGeneratorService;

    @PostMapping("/generate")
    public ResponseEntity<Resource> generateProject(@RequestBody ProjectRequest request) {
        Resource projectZip = projectGeneratorService.generateProject(request);
        
        return ResponseEntity.ok()
            .contentType(MediaType.APPLICATION_OCTET_STREAM)
            .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + request.getProjectName() + ".zip\"")
            .body(projectZip);
    }
}
