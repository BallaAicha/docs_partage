package com.socgen.unibank.services.autotest.core;

import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.DocumentVersionEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface DocumentVersionRepository extends JpaRepository<DocumentVersionEntity, Long> {
}



———————
package com.socgen.unibank.services.autotest.gateways.outbound.persistence;

import com.socgen.unibank.domain.base.DocumentStatus;
import com.socgen.unibank.services.autotest.core.DocumentVersionRepository;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.DocumentEntity;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.DocumentVersionEntity;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.DocumentVersionMetadataEntity;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.jpa.DocumentVersionTagEntity;
import com.socgen.unibank.services.autotest.model.model.DocumentVersionDTO;
import com.socgen.unibank.services.autotest.model.model.DocumentVersionMetadataEntryRequest;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Component
@AllArgsConstructor
public class DocumentVersionRepoImpl {

    private final DocumentVersionRepository documentVersionRepository;

    public DocumentVersionDTO saveDocumentVersion(DocumentVersionDTO versionDTO) {
        DocumentVersionEntity entity = new DocumentVersionEntity();
        
        // Set basic properties
        entity.setVersionNumber(versionDTO.getVersionNumber());
        entity.setName(versionDTO.getName());
        entity.setDescription(versionDTO.getDescription());
        entity.setStatus(versionDTO.getStatus() != null ? versionDTO.getStatus() : DocumentStatus.CREATED);
        entity.setFilePath(versionDTO.getFilePath());
        entity.setFileName(versionDTO.getFileName());
        entity.setCreationDate(versionDTO.getCreationDate());
        entity.setCreatedBy(versionDTO.getCreatedBy());

        // Set document reference
        DocumentEntity documentEntity = new DocumentEntity();
        documentEntity.setId(versionDTO.getDocumentId());
        entity.setDocument(documentEntity);

        // Set metadata
        if (versionDTO.getMetadata() != null) {
            List<DocumentVersionMetadataEntity> metadataEntities = versionDTO.getMetadata().stream()
                .map(metadata -> {
                    DocumentVersionMetadataEntity metadataEntity = new DocumentVersionMetadataEntity();
                    metadataEntity.setDocumentVersion(entity);
                    metadataEntity.setKey(metadata.getKey());
                    metadataEntity.setValue(metadata.getValue());
                    return metadataEntity;
                })
                .collect(Collectors.toList());
            entity.setMetadata(metadataEntities);
        }

        // Save the entity
        DocumentVersionEntity savedEntity = documentVersionRepository.save(entity);

        // Convert back to DTO
        return convertToDTO(savedEntity);
    }

    private DocumentVersionDTO convertToDTO(DocumentVersionEntity entity) {
        DocumentVersionDTO dto = new DocumentVersionDTO();
        dto.setId(entity.getId());
        dto.setDocumentId(entity.getDocument().getId());
        dto.setVersionNumber(entity.getVersionNumber());
        dto.setName(entity.getName());
        dto.setDescription(entity.getDescription());
        dto.setStatus(entity.getStatus());
        dto.setFilePath(entity.getFilePath());
        dto.setFileName(entity.getFileName());
        dto.setCreationDate(entity.getCreationDate());
        dto.setCreatedBy(entity.getCreatedBy());

        if (entity.getMetadata() != null) {
            List<DocumentVersionMetadataEntryRequest> metadataList = entity.getMetadata().stream()
                .map(metadata -> new DocumentVersionMetadataEntryRequest(
                    metadata.getId(),
                    entity.getId(),
                    metadata.getKey(),
                    metadata.getValue()
                ))
                .collect(Collectors.toList());
            dto.setMetadata(metadataList);
        } else {
            dto.setMetadata(new ArrayList<>());
        }

        return dto;
    }
}







—————
package com.socgen.unibank.services.autotest.core.usecases;

import com.socgen.unibank.domain.base.DocumentStatus;
import com.socgen.unibank.platform.models.RequestContext;
import com.socgen.unibank.platform.service.s3.ObjectStorageClient;
import com.socgen.unibank.services.autotest.core.DocumentRepository;
import com.socgen.unibank.services.autotest.gateways.outbound.persistence.DocumentVersionRepoImpl;
import com.socgen.unibank.services.autotest.model.model.*;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.util.Date;
import java.util.UUID;

@Component
@Slf4j
public class DocumentUploadHelper {

    @Autowired
    private DocumentRepository documentRepository;

    @Autowired
    private DocumentVersionRepoImpl documentVersionRepo;

    @Autowired
    @Qualifier("privateS3Client")
    private ObjectStorageClient s3Client;

    public DocumentVersionDTO uploadDocumentVersion(MultipartFile file, CreateDocumentVersionRequest input, RequestContext context) {
        validateFile(file);

        try {
            // Générer un nom unique pour le fichier version
            String versionFileName = generateVersionFileName(file.getOriginalFilename(), String.valueOf(input.getVersionNumber()));
            String objectName = generateObjectName(versionFileName);

            // Upload to S3
            s3Client.upload(
                file.getInputStream(),
                "documents-test",
                objectName,
                file.getContentType()
            );

            // Créer la version du document
            DocumentVersionDTO version = createDocumentVersionDTO(input, file, objectName, context);
            return documentVersionRepo.saveDocumentVersion(version);

        } catch (Exception e) {
            log.error("Error uploading document version: {}", e.getMessage(), e);
            throw new IllegalArgumentException("Error uploading document version: " + e.getMessage());
        }
    }

    private String generateVersionFileName(String originalFilename, String versionNumber) {
        String baseName = FilenameUtils.getBaseName(originalFilename);
        String extension = FilenameUtils.getExtension(originalFilename);
        return String.format("%s_v%s.%s", baseName, versionNumber, extension);
    }

    private String generateObjectName(String versionFileName) {
        return String.format("documents/%s/%s",
            UUID.randomUUID().toString(),
            versionFileName
        );
    }

    private DocumentVersionDTO createDocumentVersionDTO(CreateDocumentVersionRequest input, MultipartFile file, String objectName, RequestContext context) {
        DocumentVersionDTO version = new DocumentVersionDTO();
        version.setDocumentId(input.getDocumentId());
        version.setVersionNumber(String.valueOf(input.getVersionNumber()));
        version.setName(input.getName());
        version.setDescription(input.getDescription());
        version.setStatus(input.getStatus() != null ? input.getStatus() : DocumentStatus.CREATED);
        version.setFilePath(objectName);
        version.setFileName(file.getOriginalFilename());
        version.setCreationDate(new Date());
        version.setCreatedBy(context.getUsername());
        version.setMetadata(input.getMetadata());

        return version;
    }

    private void validateFile(MultipartFile file) {
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("File is null or empty");
        }

        if (!file.getContentType().equals("application/pdf")) {
            throw new IllegalArgumentException("Invalid file type. Only PDF files are allowed");
        }
    }
}
